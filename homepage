Option Explicit
Private Sub Form_Load()
    'DoCmd.ShowToolbar "Ribbon", acToolbarNo
    Me.Summary18.value = mstrUserName
    If DLookup("[User_Type]", "login_tbl", "[UserID]='" & mstrUserName & "'") = "Admin" Then
        
    ElseIf DLookup("[User_Type]", "login_tbl", "[UserID]='" & mstrUserName & "'") = "UserA" Then
        Me.cmdInputData.Enabled = False
    ElseIf DLookup("[User_Type]", "login_tbl", "[UserID]='" & mstrUserName & "'") = "UserB" Then
        Me.cmdValidate.Enabled = False
    ElseIf DLookup("[User_Type]", "login_tbl", "[UserID]='" & mstrUserName & "'") = "UserC" Then
        Me.cmdValidate.Enabled = False
        Me.cmdRunQuery.Enabled = False
        Me.cmdRKAPINPUT.Enabled = False
        Me.cmdCROInput.Enabled = False
    ElseIf DLookup("[User_Type]", "login_tbl", "[UserID]='" & mstrUserName & "'") = "UserD" Then
        Me.cmdValidate.Enabled = False
        Me.cmdInputData.Enabled = False
        Me.cmdRKAPINPUT.Enabled = False
        Me.cmdCROInput.Enabled = False
    End If
    
    Me.WorkType_List.Selected(0) = True
    Me.ServiceClassification_List.Selected(0) = True
    Me.Vessel_List.Selected(0) = True
    Me.FromLocation.Selected(0) = True
    Me.ToLocation.Selected(0) = True
    Me.Requester.Selected(0) = True
    Me.SPVInCharge.Selected(0) = True
    Me.FromCustodian.Selected(0) = True
    Me.ToCustodian.Selected(0) = True
    Me.FromAM.Selected(0) = True
    Me.ToAM.Selected(0) = True
    Me.DOR.Selected(0) = True
    Me.WellLocation.Selected(0) = True
    
    'MsgBox "The value and graphs in January 2014 - May 2019 for Service Package:" & vbNewLine & _
    '"B.21.1. Tide Station" & vbNewLine & _
    '"B.21.2. Weather Station" & vbNewLine & _
    '"B.24.1. Tide Analysis and Prediction" & vbNewLine & _
    '"B.24.2. Metocean Analysis" & vbNewLine & _
    '"B.24.3. Platform Settlement and Deformation Monitoring" & vbNewLine & _
    '"C.1. Personnel" & vbNewLine & _
    '"C.2. Equipment" & vbNewLine & _
    '"may not represent the actual value", vbInformation, "Disclaimer"
End Sub

Private Sub cmdProgressform_Click()
    DoCmd.OpenForm "PROGRESS", acNormal
    DoCmd.Close acForm, "STPS", acSaveYes
End Sub

Private Sub cmdWellAlocation_Click()
On Error GoTo Err_cmdWellAlocation_Click
    Dim MyDB As DAO.Database
    Dim qdef As DAO.QueryDef
    Dim i As Integer
    Dim strSQL, strSQL1, strA As String
    Dim strWhereA, strWhere, strWhereB As String
    Dim strIN, strDate, strPrice, strAdd, strLoc1, strLoc2 As String
    Dim strB, strC, strD, strE, strF, strG, strH, strI As String
    Dim SelectAll As Boolean
    Dim varItem As Variant
    
    Set MyDB = CurrentDb()
    Me.Summary16 = [Forms]![STPS]![WellStartDate]
    Me.Summary17 = [Forms]![STPS]![WellEndDate]
            
    strA = "SELECT IIF(DAILY_ACTIVITY.[StartDate]<=[Forms]![STPS]![WellStartDate] AND DAILY_ACTIVITY.[EndDate]>=[Forms]![STPS]![WellEndDate],(INT([Forms]![STPS]![WellEndDate])-INT([Forms]![STPS]![WellStartDate])+1),IIF" & _
             "(DAILY_ACTIVITY.[StartDate]<=[Forms]![STPS]![WellStartDate] AND DAILY_ACTIVITY.[EndDate]<=[Forms]![STPS]![WellEndDate],(INT(DAILY_ACTIVITY.[EndDate])-INT([Forms]![STPS]![WellStartDate])+1),IIF" & _
             "(DAILY_ACTIVITY.[StartDate]>=[Forms]![STPS]![WellStartDate] AND DAILY_ACTIVITY.[EndDate]<=[Forms]![STPS]![WellEndDate],(INT(DAILY_ACTIVITY.[EndDate])-INT(DAILY_ACTIVITY.[StartDate])+1),IIF " & _
             "(DAILY_ACTIVITY.[StartDate]>=[Forms]![STPS]![WellStartDate] AND DAILY_ACTIVITY.[EndDate]>=[Forms]![STPS]![WellEndDate],(INT([Forms]![STPS]![WellEndDate])-INT(DAILY_ACTIVITY.[StartDate])+1),0)))) " & _
             "AS Duration, LOCATION1.[Custodian] as FromCusto, LOCATION5.[Custodian] as ToCusto, * " & _
             "FROM (((((DAILY_ACTIVITY INNER JOIN [DOR_TYPE] ON DAILY_ACTIVITY.[DOR] = [DOR_TYPE].[DOR]) LEFT JOIN [WORK_TYPE] ON DAILY_ACTIVITY.WorkType = WORK_TYPE.[Work Type]) LEFT JOIN [ADDITIONAL_TYPE] ON DAILY_ACTIVITY.AdditionelType = ADDITIONAL_TYPE.[Additionel Type]) " & _
             "LEFT JOIN [LOCATION] AS [LOCATION1] ON DAILY_ACTIVITY.[From_Location1]=LOCATION1.[Location]) " & _
             "LEFT JOIN [LOCATION] AS [LOCATION5] ON DAILY_ACTIVITY.[To_Location5]=LOCATION5.[Location]) " & _
             "LEFT JOIN [VESSEL] ON DAILY_ACTIVITY.[Vessel]=VESSEL.[Vessel_Name] "
    
    'Create the WHERE string, and strip off the last comma of the IN string
    strWhereA = " WHERE ((DAILY_ACTIVITY.StartDate<=[Forms]![STPS]![WellStartDate] AND DAILY_ACTIVITY.EndDate>=[Forms]![STPS]![WellEndDate]) " & _
                "OR (DAILY_ACTIVITY.StartDate<=[Forms]![STPS]![WellStartDate] AND DAILY_ACTIVITY.EndDate<=[Forms]![STPS]![WellEndDate] AND (DAILY_ACTIVITY.EndDate)>=[Forms]![STPS]![WellStartDate]) " & _
                "OR (DAILY_ACTIVITY.StartDate>=[Forms]![STPS]![WellStartDate] AND DAILY_ACTIVITY.EndDate<=[Forms]![STPS]![WellEndDate])" & _
                "OR (DAILY_ACTIVITY.StartDate>=[Forms]![STPS]![WellStartDate] AND DAILY_ACTIVITY.EndDate>=[Forms]![STPS]![WellEndDate] AND (DAILY_ACTIVITY.StartDate)<=[Forms]![STPS]![WellEndDate]))" & _
                "AND (([DOR_TYPE].Category)<>'Rejected') " & _
                "AND ((DAILY_ACTIVITY.[PHM_Validation])=True) "
    
    'Join SELECT and Main WHERE Clause
    strSQL = strA & strWhereA
    
    strA = "SELECT IIF(DAILY_ACTIVITY.[Nomor_Contract]<>4600005972 OR ISNULL(DAILY_ACTIVITY.[Nomor_Contract]),0, IIF" & _
           "(DAILY_ACTIVITY.[DOR]<>'PIS/AUG20' AND DAILY_ACTIVITY.[WorkType]<>'C.1. Personnel' AND DAILY_ACTIVITY.[WorkType]<>'C.2. Equipment' AND DAILY_ACTIVITY.[StartDate]>#2020/7/31#,(Duration*WORK_TYPE.[Unit Price_082020]), IIF" & _
           "(DAILY_ACTIVITY.[WorkType]='C.1. Personnel' OR DAILY_ACTIVITY.[WorkType]='C.2. Equipment',(Duration*ADDITIONAL_TYPE.[Daily Unit Price]), " & _
           "(Duration*WORK_TYPE.[Unit Price_062019]))))" & _
           " AS Prices, Duration, FromCusto, ToCusto, * FROM ("
           
    strSQL = strA & strSQL & ") ORDER BY DAILY_ACTIVITY.[StartDate], DAILY_ACTIVITY.[ServiceOrder]"
    
    'WELL LOCATION: Build the IN string by looping through the FROM LOC listbox
    For i = 0 To WellLocation.ListCount - 1
        If WellLocation.Selected(i) Then
            If FromLocation.Column(1, i) = "ALL" Then
                SelectAll = True
            End If
            strIN = strIN & "'" & WellLocation.Column(1, i) & "',"
        End If
    Next i
    Me.Summary5 = Replace((Left(strIN, Len(strIN) - 1)), "'", "")
    
    'If "ALL" was selected in the listbox, don't add the WHERE condition
    If Not SelectAll Then
        strWhere = "WHERE LOC in " & _
                 "(" & Left(strIN, Len(strIN) - 1) & ")"
    Else
        strWhere = ""
    End If
    strIN = ""
    SelectAll = False
    
    'Location Query
    strLoc1 = "SELECT DAILY_ACTIVITY.[WorkType],WORK_TYPE.[ID] AS WID, " & _
             "IIF((WORK_TYPE.[ID]=3 OR WORK_TYPE.[ID]=4 OR (WORK_TYPE.[ID]=12 AND DAILY_ACTIVITY.[Support_Barge_RIG]=Yes)) , LOCATION5.ID ,LOCATION1.ID) AS LOCID, " & _
             "IIF((WORK_TYPE.[ID]=3 OR WORK_TYPE.[ID]=4 OR (WORK_TYPE.[ID]=12 AND DAILY_ACTIVITY.[Support_Barge_RIG]=Yes)) , DAILY_ACTIVITY.[To_Location5] ,DAILY_ACTIVITY.[From_Location1]) AS LOC, " & _
             "DAILY_ACTIVITY.[ServiceClassification], WORK_TYPE.[Unit Price_082020],Duration,Prices FROM ("
    strLoc1 = strLoc1 & strSQL & ")"
    
    strLoc2 = "SELECT DAILY_ACTIVITY.[WorkType], WID, LOCID, LOC,DAILY_ACTIVITY.[ServiceClassification], WORK_TYPE.[Unit Price_082020],Sum(Duration) AS Total_Duration,Sum(Prices) AS Total_Price FROM ("
    strLoc2 = strLoc2 & strLoc1 & ") " & strWhere & " GROUP BY LOCID, LOC, DAILY_ACTIVITY.[WorkType],WID, WORK_TYPE.[Unit Price_082020],DAILY_ACTIVITY.[ServiceClassification] HAVING DAILY_ACTIVITY.[ServiceClassification]='A1 - Site Preparation Survey' ORDER BY LOCID, LOC, WID "
    
    MyDB.QueryDefs.Delete "Query_SP-DETAIL"
    Set qdef = MyDB.CreateQueryDef("Query_SP-DETAIL", strLoc2)
    
    DoCmd.OpenReport "SITE PREP (LOCATION) REPORT", acViewReport


Exit_cmdWellAlocation_Click:
    Exit Sub

Err_cmdWellAlocation_Click:
        'Write out the error and exit the sub
        MsgBox Err.Description
        Resume Exit_cmdWellAlocation_Click
End Sub


Function FileExist(FileFullPath As String) As Boolean
  Dim value As Boolean
  value = False
  If Dir(FileFullPath) <> "" Then
    value = True
  End If
  FileExist = value
End Function

Private Sub cmdExportFile_Click()
On Error GoTo ErrorHandler

    Dim dbTable, dDatestr As String
    Dim filePath As String
    Dim dDate As Date
    Dim intAnswer As Integer
    Dim Reportname As String
    Dim filename As String
    
    'Get current date
    dDate = DateAdd("d", 0, Date)
    'Or
    dDate = Date
    dDatestr = Format(dDate, "_DDMMYYYY")
    
    filePath = Application.CurrentProject.Path & "\EXPORT\" 'Mention the xlWorkbook path
    
    If [Forms]![STPS]![cboChooseExportFile] = "DAILY ACTIVITY GROUP BY WORK TYPE (LAMPIRAN 1)" Then
        filename = "DAILY ACTIVITY GROUP BY WORK TYPE (LAMPIRAN 1)"  'Replace the ‘xlWorkbookName.xlsx’ with your workbook name
        dbTable = "Query_Attach1" 'Replace ‘tblMaster’ with the table in the Access DB from which you want to export the data
        Reportname = "ATTACHMENT_1_STPS_4600005972"
        
    ElseIf [Forms]![STPS]![cboChooseExportFile] = "DAILY ACTIVITY ADDITIONAL SERVICES (LAMPIRAN 2)" Then
        filename = "DAILY ACTIVITY ADDITIONAL SERVICES (LAMPIRAN 2)"  'Replace the ‘xlWorkbookName.xlsx’ with your workbook name
        dbTable = "Query_Attach2" 'Replace ‘tblMaster’ with the table in the Access DB from which you want to export the data
        Reportname = "ATTACHMENT_2_STPS_4600005972"
 
    ElseIf [Forms]![STPS]![cboChooseExportFile] = "DAILY ACTIVITY DETAIL (LAMPIRAN 3)" Then
        filename = "DAILY ACTIVITY DETAIL (LAMPIRAN 3)"  'Replace the ‘xlWorkbookName.xlsx’ with your workbook name
        dbTable = "Query_Attach3" 'Replace ‘tblMaster’ with the table in the Access DB from which you want to export the data
        Reportname = "ATTACHMENT_3_STPS_4600005972"
 
    ElseIf [Forms]![STPS]![cboChooseExportFile] = "DAILY ACTIVITY SITE PREP GROUP BY LOCATION" Then
        filename = "DAILY ACTIVITY SITE PREP GROUP BY LOCATION"  'Replace the ‘xlWorkbookName.xlsx’ with your workbook name
        dbTable = "Query_SP-DETAIL" 'Replace ‘tblMaster’ with the table in the Access DB from which you want to export the data
        Reportname = "ATTACHMENT_SP_STPS_4600005972"
        
    ElseIf [Forms]![STPS]![cboChooseExportFile] = "MONTHLY WORK DAYS GROUP BY WORK TYPE" Then
        If Me.OptGroupFile = 1 Then
            filename = "MONTHLY WORK DAYS GROUP BY WORK TYPE"  'Replace the ‘xlWorkbookName.xlsx’ with your workbook name
            dbTable = "STPS_STATISTIC_MONTHLY" 'Replace ‘tblMaster’ with the table in the Access DB from which you want to export the data
        ElseIf Me.OptGroupFile = 2 Then
            MsgBox "Export only available to excel file.", vbOKOnly
            Exit Sub
        End If
    ElseIf [Forms]![STPS]![cboChooseExportFile] = "ANNUAL WORK DAYS GROUP BY WORK TYPE" Then
        If Me.OptGroupFile = 1 Then
            filename = "ANNUAL WORK DAYS GROUP BY WORK TYPE"  'Replace the ‘xlWorkbookName.xlsx’ with your workbook name
            dbTable = "STPS_STATISTIC_ANNUAL" 'Replace ‘tblMaster’ with the table in the Access DB from which you want to export the data
        ElseIf Me.OptGroupFile = 2 Then
            MsgBox "Export only available to excel file.", vbOKOnly
            Exit Sub
        End If
    ElseIf [Forms]![STPS]![cboChooseExportFile] = "RKAP Detail" Then
        If IsNull(Me.Summary14) Then
            filename = "RKAP Detail"  'Replace the ‘xlWorkbookName.xlsx’ with your workbook name
            dbTable = "DA_RKAP" 'Replace ‘tblMaster’ with the table in the Access DB from which you want to export the data
            Reportname = "RKAP MONITORING"
        Else
            MsgBox "You must make a selection from the RKAP MONITORING tab" _
               , , "Selection Required !"
            Exit Sub
        End If
        
    ElseIf [Forms]![STPS]![cboChooseExportFile] = "RKAP SUMMARY GROUP BY WORK" Then
        If IsNull(Me.Summary14) Then
            filename = "RKAP SUMMARY GROUP BY WORK"  'Replace the ‘xlWorkbookName.xlsx’ with your workbook name
            dbTable = "DA_RKAP_SUMMARY" 'Replace ‘tblMaster’ with the table in the Access DB from which you want to export the data
            Reportname = "SUMMARY of  RKAP MONITORING"
        Else
            MsgBox "You must make a selection from the RKAP MONITORING tab" _
               , , "Selection Required !"
            Exit Sub
        End If
    ElseIf [Forms]![STPS]![cboChooseExportFile] = "DAILY ACTIVITY SERVICE ORDER" Then
        If Me.OptGroupFile = 1 Then
            filename = "DAILY ACTIVITY SERVICE ORDER"  'Replace the ‘xlWorkbookName.xlsx’ with your workbook name
            dbTable = "Query_SO" 'Replace ‘tblMaster’ with the table in the Access DB from which you want to export the data
        ElseIf Me.OptGroupFile = 2 Then
            MsgBox "Export only available to excel file.", vbOKOnly
            Exit Sub
        End If
    End If
    
    If Me.OptGroupFile = 1 Then
        filePath = filePath & filename & dDatestr & ".xls"

        'check if file already exists
        If IsFile(filePath) Then
            intAnswer = MsgBox(prompt:="XLS file already exists: " & vbNewLine & filePath & vbNewLine & vbNewLine & _
            "Would you like to replace existing file?", buttons:=vbYesNo, Title:="Existing XLS File")
            If intAnswer = vbNo Then
                Exit Sub
            Else
                DoCmd.TransferSpreadsheet transfertype:=acExport, SpreadsheetType:=acSpreadsheetTypeExcel12Xml, tablename:=dbTable, filename:=filePath, hasfieldnames:=True
                MsgBox "Your file had been successfully exported." & vbNewLine & filePath, vbOKOnly
            End If
        Else
            DoCmd.TransferSpreadsheet transfertype:=acExport, SpreadsheetType:=acSpreadsheetTypeExcel12Xml, tablename:=dbTable, filename:=filePath, hasfieldnames:=True
            MsgBox "Your file had been successfully exported." & vbNewLine & filePath, vbOKOnly
        End If
    ElseIf Me.OptGroupFile = 2 Then
        filePath = filePath & filename & dDatestr & ".pdf"
    
        'check if file already exists
        If IsFile(filePath) Then
            intAnswer = MsgBox(prompt:="PDF file already exists: " & vbNewLine & filePath & vbNewLine & vbNewLine & _
            "Would you like to replace existing file?", buttons:=vbYesNo, Title:="Existing PDF File")
            If intAnswer = vbNo Then
                Exit Sub
            Else
                DoCmd.OutputTo acOutputReport, Reportname, acFormatPDF, filePath
                MsgBox "Your file had been successfully exported." & vbNewLine & filePath, vbOKOnly
            End If
        Else
            DoCmd.OutputTo acOutputReport, Reportname, acFormatPDF, filePath
            MsgBox "Your file had been successfully exported." & vbNewLine & filePath, vbOKOnly
        End If
    End If
    
ErrorHandlerExit:

Exit Sub

ErrorHandler:
If Err.Number = 3044 Then
    intAnswer = MsgBox("Do you want to create folder EXPORT?", _
      vbQuestion + vbYesNo)
    If intAnswer = vbYes Then
        MkDir (Application.CurrentProject.Path & "\EXPORT\")
        DoCmd.TransferSpreadsheet transfertype:=acExport, SpreadsheetType:=acSpreadsheetTypeExcel12Xml, tablename:=dbTable, filename:=filePath, hasfieldnames:=True
        MsgBox "Your file had been successfully exported." & vbNewLine & filePath, vbOKOnly
    Else
    MsgBox "Error No: " & Err.Number & ";Description: " & Err.Description
    End If
ElseIf Err.Number = 2501 Then
    intAnswer = MsgBox("Do you want to create folder EXPORT?", _
      vbQuestion + vbYesNo)
    If intAnswer = vbYes Then
        MkDir (Application.CurrentProject.Path & "\EXPORT\")
        DoCmd.OutputTo acOutputReport, Reportname, acFormatPDF, filePath
        MsgBox "Your file had been successfully exported." & vbNewLine & filePath, vbOKOnly
    Else
    MsgBox "Error No: " & Err.Number & ";Description: " & Err.Description
    End If
ElseIf Err.Number = 2487 Or Err.Number = 2495 Then
    MsgBox "You must make a selection from the RKAP MONITORING tab" _
               , , "Selection Required !"
    Exit Sub
Else
    MsgBox "Error No: " & Err.Number & ";Description: " & Err.Description
End If

Resume ErrorHandlerExit
    
End Sub

Private Sub WellSearchBox_Change()
    Dim i As Integer
    Dim j As Integer
    Dim varItem As Variant


    With Me.WellLocation

        For i = 0 To .ListCount - 1
            For j = 0 To .ColumnCount - 1
                If InStr(1, .Column(j, i), Me.WellSearchBox.Text, vbTextCompare) Then
                    '.ListIndex = i
                    .Selected(i) = True
                'ElseIf Trim(Me.FromLocSearchBox.Value & vbNullString) = vbNullString Then
                    'Clear listbox selection after running query
                    For Each varItem In .ItemsSelected
                        .Selected(varItem) = False
                    Next varItem
                End If
            Next j
        Next i
    End With
End Sub
Private Sub DORSearchBox_Change()
    Dim i As Integer
    Dim j As Integer
    Dim varItem As Variant


    With Me.DOR

        For i = 0 To .ListCount - 1
            For j = 0 To .ColumnCount - 1
                If InStr(1, .Column(j, i), Me.DORSearchBox.Text, vbTextCompare) Then
                    '.ListIndex = i
                    .Selected(i) = True
                'ElseIf Trim(Me.DORSearchBox.Value & vbNullString) = vbNullString Then
                    'Clear listbox selection after running query
                    For Each varItem In .ItemsSelected
                        .Selected(varItem) = False
                    Next varItem
                End If
            Next j
        Next i
    End With
End Sub
Private Sub SPVSearchBox_Change()
    Dim i As Integer
    Dim j As Integer
    Dim varItem As Variant


    With Me.SPVInCharge

        For i = 0 To .ListCount - 1
            For j = 0 To .ColumnCount - 1
                If InStr(1, .Column(j, i), Me.SPVSearchBox.Text, vbTextCompare) Then
                    '.ListIndex = i
                    .Selected(i) = True
                'ElseIf Trim(Me.SPVSearchBox.Value & vbNullString) = vbNullString Then
                    'Clear listbox selection after running query
                    For Each varItem In .ItemsSelected
                        .Selected(varItem) = False
                    Next varItem
                End If
            Next j
        Next i
    End With
End Sub
Private Sub VesSearchBox_Change()
    Dim i As Integer
    Dim j As Integer
    Dim varItem As Variant


    With Me.Vessel_List

        For i = 0 To .ListCount - 1
            For j = 0 To .ColumnCount - 1
                If InStr(1, .Column(j, i), Me.VesSearchBox.Text, vbTextCompare) Then
                    '.ListIndex = i
                    .Selected(i) = True
                'ElseIf Trim(Me.VesSearchBox.Value & vbNullString) = vbNullString Then
                    'Clear listbox selection after running query
                    For Each varItem In .ItemsSelected
                        .Selected(varItem) = False
                    Next varItem
                End If
            Next j
        Next i
    End With
End Sub
Private Sub ReqSearchBox_Change()
    Dim i As Integer
    Dim j As Integer
    Dim varItem As Variant


    With Me.Requester

        For i = 0 To .ListCount - 1
            For j = 0 To .ColumnCount - 1
                If InStr(1, .Column(j, i), Me.ReqSearchBox.Text, vbTextCompare) Then
                    '.ListIndex = i
                    .Selected(i) = True
                'ElseIf Trim(Me.ReqSearchBox.Value & vbNullString) = vbNullString Then
                    'Clear listbox selection after running query
                    For Each varItem In .ItemsSelected
                        .Selected(varItem) = False
                    Next varItem
                End If
            Next j
        Next i
    End With
End Sub
Private Sub FromLocSearchBox_Change()
    Dim i As Integer
    Dim j As Integer
    Dim varItem As Variant


    With Me.FromLocation

        For i = 0 To .ListCount - 1
            For j = 0 To .ColumnCount - 1
                If InStr(1, .Column(j, i), Me.FromLocSearchBox.Text, vbTextCompare) Then
                    '.ListIndex = i
                    .Selected(i) = True
                'ElseIf Trim(Me.FromLocSearchBox.Value & vbNullString) = vbNullString Then
                    'Clear listbox selection after running query
                    For Each varItem In .ItemsSelected
                        .Selected(varItem) = False
                    Next varItem
                End If
            Next j
        Next i
    End With
End Sub
Private Sub ToLocSearchBox_Change()
    Dim i As Integer
    Dim j As Integer
    Dim varItem As Variant


    With Me.ToLocation

        For i = 0 To .ListCount - 1
            For j = 0 To .ColumnCount - 1
                If InStr(1, .Column(j, i), Me.ToLocSearchBox.Text, vbTextCompare) Then
                    '.ListIndex = i
                    .Selected(i) = True
                'ElseIf Trim(Me.ToLocSearchBox.Value & vbNullString) = vbNullString Then
                    'Clear listbox selection after running query
                    For Each varItem In .ItemsSelected
                        .Selected(varItem) = False
                    Next varItem
                End If
            Next j
        Next i
    End With
End Sub

Private Sub cmdRunQuery_Click()
On Error GoTo Err_cmdRunQuery_Click
    Dim MyDB As DAO.Database
    Dim qdef As DAO.QueryDef
    Dim i As Integer
    Dim strSQL, strSQL1, strA As String
    Dim strWhereA, strWhere, strWhereB As String
    Dim strIN, strDate, strPrice, strAdd, strLoc1, strLoc2 As String
    Dim strB, strC, strD, strE, strF, strG, strH, strI As String
    Dim SelectAll As Boolean
    Dim varItem As Variant

    Set MyDB = CurrentDb()
    Me.Summary16 = [Forms]![STPS]![Start Date]
    Me.Summary17 = [Forms]![STPS]![End Date]
            
    strA = "SELECT IIF(DAILY_ACTIVITY.[StartDate]<=[Forms]![STPS]![Start Date] AND DAILY_ACTIVITY.[EndDate]>=[Forms]![STPS]![End Date],(INT([Forms]![STPS]![End Date])-INT([Forms]![STPS]![Start Date])+1),IIF" & _
             "(DAILY_ACTIVITY.[StartDate]<=[Forms]![STPS]![Start Date] AND DAILY_ACTIVITY.[EndDate]<=[Forms]![STPS]![End Date],(INT(DAILY_ACTIVITY.[EndDate])-INT([Forms]![STPS]![Start Date])+1),IIF" & _
             "(DAILY_ACTIVITY.[StartDate]>=[Forms]![STPS]![Start Date] AND DAILY_ACTIVITY.[EndDate]<=[Forms]![STPS]![End Date],(INT(DAILY_ACTIVITY.[EndDate])-INT(DAILY_ACTIVITY.[StartDate])+1),IIF " & _
             "(DAILY_ACTIVITY.[StartDate]>=[Forms]![STPS]![Start Date] AND DAILY_ACTIVITY.[EndDate]>=[Forms]![STPS]![End Date],(INT([Forms]![STPS]![End Date])-INT(DAILY_ACTIVITY.[StartDate])+1),0)))) " & _
             "AS Duration, LOCATION1.[Custodian] as FromCusto, LOCATION5.[Custodian] as ToCusto, * " & _
             "FROM (((((DAILY_ACTIVITY INNER JOIN [DOR_TYPE] ON DAILY_ACTIVITY.[DOR] = [DOR_TYPE].[DOR]) LEFT JOIN [WORK_TYPE] ON DAILY_ACTIVITY.WorkType = WORK_TYPE.[Work Type]) LEFT JOIN [ADDITIONAL_TYPE] ON DAILY_ACTIVITY.AdditionelType = ADDITIONAL_TYPE.[Additionel Type]) " & _
             "LEFT JOIN [LOCATION] AS [LOCATION1] ON DAILY_ACTIVITY.[From_Location1]=LOCATION1.[Location]) " & _
             "LEFT JOIN [LOCATION] AS [LOCATION5] ON DAILY_ACTIVITY.[To_Location5]=LOCATION5.[Location]) " & _
             "LEFT JOIN [VESSEL] ON DAILY_ACTIVITY.[Vessel]=VESSEL.[Vessel_Name] "
    
    'Create the WHERE string, and strip off the last comma of the IN string
    strWhereA = " WHERE ((DAILY_ACTIVITY.StartDate<=[Forms]![STPS]![Start Date] AND DAILY_ACTIVITY.EndDate>=[Forms]![STPS]![End Date]) " & _
                "OR (DAILY_ACTIVITY.StartDate<=[Forms]![STPS]![Start Date] AND DAILY_ACTIVITY.EndDate<=[Forms]![STPS]![End Date] AND (DAILY_ACTIVITY.EndDate)>=[Forms]![STPS]![Start Date]) " & _
                "OR (DAILY_ACTIVITY.StartDate>=[Forms]![STPS]![Start Date] AND DAILY_ACTIVITY.EndDate<=[Forms]![STPS]![End Date])" & _
                "OR (DAILY_ACTIVITY.StartDate>=[Forms]![STPS]![Start Date] AND DAILY_ACTIVITY.EndDate>=[Forms]![STPS]![End Date] AND (DAILY_ACTIVITY.StartDate)<=[Forms]![STPS]![End Date]))" & _
                "AND (([DOR_TYPE].Category)<>'Rejected') " & _
                "AND ((DAILY_ACTIVITY.[PHM_Validation])=True) "
    
    strWhereB = " WHERE ((DAILY_ACTIVITY.StartDate<=[Forms]![STPS]![Start Date] AND DAILY_ACTIVITY.EndDate>=[Forms]![STPS]![End Date]) " & _
                "OR (DAILY_ACTIVITY.StartDate<=[Forms]![STPS]![Start Date] AND DAILY_ACTIVITY.EndDate<=[Forms]![STPS]![End Date] AND (DAILY_ACTIVITY.EndDate)>=[Forms]![STPS]![Start Date]) " & _
                "OR (DAILY_ACTIVITY.StartDate>=[Forms]![STPS]![Start Date] AND DAILY_ACTIVITY.EndDate<=[Forms]![STPS]![End Date])" & _
                "OR (DAILY_ACTIVITY.StartDate>=[Forms]![STPS]![Start Date] AND DAILY_ACTIVITY.EndDate>=[Forms]![STPS]![End Date] AND (DAILY_ACTIVITY.StartDate)<=[Forms]![STPS]![End Date]))" & _
                "AND (([DOR_TYPE].Category)<>'Rejected') "
    
    'Join SELECT and Main WHERE Clause
    strSQL = strA & strWhereA
    strSQL1 = strA & strWhereB
        
    'WORKTYPE: Build the IN string by looping through the Work Type listbox
    For i = 0 To WorkType_List.ListCount - 1
        If WorkType_List.Selected(i) Then
            If WorkType_List.Column(1, i) = "ALL" Then
                SelectAll = True
            End If
            strIN = strIN & "'" & WorkType_List.Column(1, i) & "',"
        End If
    Next i
    Me.Summary1 = Replace((Left(strIN, Len(strIN) - 1)), "'", "")
        
    'Create the WHERE string, and strip off the last comma of the IN string
    strWhere = "AND (DAILY_ACTIVITY.WorkType in " & _
                 "(" & Left(strIN, Len(strIN) - 1) & "))"
    strIN = ""
    
    'If "ALL" was selected in the listbox, don't add the WHERE condition
    If Not SelectAll Then
        strSQL = strSQL & strWhere
        strSQL1 = strSQL1 & strWhere
    End If
    SelectAll = False

    'SERVICE CLASS: Build the IN string by looping through the Service Classification listbox
    For i = 0 To ServiceClassification_List.ListCount - 1
        If ServiceClassification_List.Selected(i) Then
            If ServiceClassification_List.Column(1, i) = "ALL" Then
                SelectAll = True
            End If
            strIN = strIN & "'" & ServiceClassification_List.Column(1, i) & "',"
        End If
    Next i
    Me.Summary2 = Replace((Left(strIN, Len(strIN) - 1)), "'", "")
    
    'Create the WHERE string, and strip off the last comma of the IN string
    strWhere = "AND (DAILY_ACTIVITY.ServiceClassification in " & _
                 "(" & Left(strIN, Len(strIN) - 1) & "))"
    strIN = ""
               
    'If "ALL" was selected in the listbox, don't add the WHERE condition
    If Not SelectAll Then
        strSQL = strSQL & strWhere
        strSQL1 = strSQL1 & strWhere
    End If
    SelectAll = False
    
    
    'VESSEL: Build the IN string by looping through the Vessel listbox
    For i = 0 To Vessel_List.ListCount - 1
        If Vessel_List.Selected(i) Then
            If Vessel_List.Column(1, i) = "ALL" Then
                SelectAll = True
            End If
            strIN = strIN & "'" & Vessel_List.Column(1, i) & "',"
        End If
    Next i
    Me.Summary3 = Replace((Left(strIN, Len(strIN) - 1)), "'", "")
    
    'Create the WHERE string, and strip off the last comma of the IN string
    strWhere = "AND (DAILY_ACTIVITY.Vessel in " & _
                 "(" & Left(strIN, Len(strIN) - 1) & "))"
    strIN = ""
               
    'If "ALL" was selected in the listbox, don't add the WHERE condition
    If Not SelectAll Then
        strSQL = strSQL & strWhere
        strSQL1 = strSQL1 & strWhere
    End If
    SelectAll = False
    
    'FROM LOCATION: Build the IN string by looping through the FROM LOC listbox
    For i = 0 To FromLocation.ListCount - 1
        If FromLocation.Selected(i) Then
            If FromLocation.Column(1, i) = "ALL" Then
                SelectAll = True
            End If
            strIN = strIN & "'" & FromLocation.Column(1, i) & "',"
        End If
    Next i
    Me.Summary5 = Replace((Left(strIN, Len(strIN) - 1)), "'", "")
    
    'Create the WHERE string, and strip off the last comma of the IN string
    strWhere = "AND (DAILY_ACTIVITY.From_Location1 in " & _
                 "(" & Left(strIN, Len(strIN) - 1) & "))"
    strIN = ""
               
    'If "ALL" was selected in the listbox, don't add the WHERE condition
    If Not SelectAll Then
        strSQL = strSQL & strWhere
        strSQL1 = strSQL1 & strWhere
    End If
    SelectAll = False
    
    'TO LOCATION: Build the IN string by looping through the TO LOC listbox
    For i = 0 To ToLocation.ListCount - 1
        If ToLocation.Selected(i) Then
            If ToLocation.Column(1, i) = "ALL" Then
                SelectAll = True
            End If
            strIN = strIN & "'" & ToLocation.Column(1, i) & "',"
        End If
    Next i
    Me.Summary6 = Replace((Left(strIN, Len(strIN) - 1)), "'", "")
    
    'Create the WHERE string, and strip off the last comma of the IN string
    strWhere = "AND (DAILY_ACTIVITY.To_Location5 in " & _
                 "(" & Left(strIN, Len(strIN) - 1) & "))"
    strIN = ""
               
    'If "ALL" was selected in the listbox, don't add the WHERE condition
    If Not SelectAll Then
        strSQL = strSQL & strWhere
        strSQL1 = strSQL1 & strWhere
    End If
    SelectAll = False
    
    'REQUESTER: Build the IN string by looping through the REQUESTER listbox
    For i = 0 To Requester.ListCount - 1
        If Requester.Selected(i) Then
            If Requester.Column(0, i) = "ALL" Then
                SelectAll = True
            End If
            strIN = strIN & "'" & Requester.Column(0, i) & "',"
        End If
    Next i
    Me.Summary4 = Replace((Left(strIN, Len(strIN) - 1)), "'", "")
    
    'Create the WHERE string, and strip off the last comma of the IN string
    strWhere = "AND (DAILY_ACTIVITY.Requester in " & _
                 "(" & Left(strIN, Len(strIN) - 1) & "))"
    strIN = ""
               
    'If "ALL" was selected in the listbox, don't add the WHERE condition
    If Not SelectAll Then
        strSQL = strSQL & strWhere
        strSQL1 = strSQL1 & strWhere
    End If
    SelectAll = False
    
    'SPV IN CHARGE: Build the IN string by looping through the SPV IN CHARGE listbox
    For i = 0 To SPVInCharge.ListCount - 1
        If SPVInCharge.Selected(i) Then
            If SPVInCharge.Column(1, i) = "ALL" Then
                SelectAll = True
            End If
            strIN = strIN & "'" & SPVInCharge.Column(1, i) & "',"
        End If
    Next i
    Me.Summary11 = Replace((Left(strIN, Len(strIN) - 1)), "'", "")
    
    'Create the WHERE string, and strip off the last comma of the IN string
    strWhere = "AND (DAILY_ACTIVITY.SupervisionInCharge in " & _
                 "(" & Left(strIN, Len(strIN) - 1) & "))"
    strIN = ""
               
    'If "ALL" was selected in the listbox, don't add the WHERE condition
    If Not SelectAll Then
        strSQL = strSQL & strWhere
        strSQL1 = strSQL1 & strWhere
    End If
    SelectAll = False
    
    'FROM CUSTODIAN: Build the IN string by looping through the FROM CUSTODIAN listbox
    For i = 0 To FromCustodian.ListCount - 1
        If FromCustodian.Selected(i) Then
            If FromCustodian.Column(1, i) = "ALL" Then
                SelectAll = True
            End If
            strIN = strIN & "'" & FromCustodian.Column(1, i) & "',"
        End If
    Next i
    Me.Summary7 = Replace((Left(strIN, Len(strIN) - 1)), "'", "")
    
    'Create the WHERE string, and strip off the last comma of the IN string
    strWhere = "AND (LOCATION1.Custodian in " & _
                 "(" & Left(strIN, Len(strIN) - 1) & "))"
    strIN = ""
               
    'If "ALL" was selected in the listbox, don't add the WHERE condition
    If Not SelectAll Then
        strSQL = strSQL & strWhere
        strSQL1 = strSQL1 & strWhere
    End If
    SelectAll = False
    
    'TO CUSTODIAN: Build the IN string by looping through the TO CUSTODIAN listbox
    For i = 0 To ToCustodian.ListCount - 1
        If ToCustodian.Selected(i) Then
            If ToCustodian.Column(1, i) = "ALL" Then
                SelectAll = True
            End If
            strIN = strIN & "'" & ToCustodian.Column(1, i) & "',"
        End If
    Next i
    Me.Summary8 = Replace((Left(strIN, Len(strIN) - 1)), "'", "")
    
    'Create the WHERE string, and strip off the last comma of the IN string
    strWhere = "AND (LOCATION5.Custodian in " & _
                 "(" & Left(strIN, Len(strIN) - 1) & "))"
    strIN = ""
               
    'If "ALL" was selected in the listbox, don't add the WHERE condition
    If Not SelectAll Then
        strSQL = strSQL & strWhere
        strSQL1 = strSQL1 & strWhere
    End If
    SelectAll = False
    
    'FROM AREA MANAGEMENT: Build the IN string by looping through the FROM AREA MANAGEMENT listbox
    For i = 0 To FromAM.ListCount - 1
        If FromAM.Selected(i) Then
            If FromAM.Column(1, i) = "ALL" Then
                SelectAll = True
            End If
            strIN = strIN & "'" & FromAM.Column(1, i) & "',"
        End If
    Next i
    Me.Summary9 = Replace((Left(strIN, Len(strIN) - 1)), "'", "")
    
    'Create the WHERE string, and strip off the last comma of the IN string
    strWhere = "AND (LOCATION1.Area_Management in " & _
                 "(" & Left(strIN, Len(strIN) - 1) & "))"
    strIN = ""
               
    'If "ALL" was selected in the listbox, don't add the WHERE condition
    If Not SelectAll Then
        strSQL = strSQL & strWhere
        strSQL1 = strSQL1 & strWhere
    End If
    SelectAll = False
    
    'TO AREA MANAGEMENT: Build the IN string by looping through the TO AREA MANAGEMENT listbox
    For i = 0 To ToAM.ListCount - 1
        If ToAM.Selected(i) Then
            If ToAM.Column(1, i) = "ALL" Then
                SelectAll = True
            End If
            strIN = strIN & "'" & ToAM.Column(1, i) & "',"
        End If
    Next i
    Me.Summary10 = Replace((Left(strIN, Len(strIN) - 1)), "'", "")
    
    'Create the WHERE string, and strip off the last comma of the IN string
    strWhere = "AND (LOCATION5.Area_Management in " & _
                 "(" & Left(strIN, Len(strIN) - 1) & "))"
    strIN = ""
               
    'If "ALL" was selected in the listbox, don't add the WHERE condition
    If Not SelectAll Then
        strSQL = strSQL & strWhere
        strSQL1 = strSQL1 & strWhere
    End If
    SelectAll = False
    
    'DOR_TYPE: Build the IN string by looping through the Work Type listbox
    For i = 0 To DOR.ListCount - 1
        If DOR.Selected(i) Then
            If DOR.Column(1, i) = "ALL" Then
                SelectAll = True
            End If
            strIN = strIN & "'" & DOR.Column(1, i) & "',"
        End If
    Next i
    Me.Summary12 = Replace((Left(strIN, Len(strIN) - 1)), "'", "")
        
    'Create the WHERE string, and strip off the last comma of the IN string
    strWhere = "AND (DAILY_ACTIVITY.DOR in " & _
                 "(" & Left(strIN, Len(strIN) - 1) & "))"
    strIN = ""
    
    'If "ALL" was selected in the listbox, don't add the WHERE condition
    If Not SelectAll Then
        strSQL = strSQL & strWhere
        strSQL1 = strSQL1 & strWhere
    End If
    SelectAll = False
    
    strA = "SELECT IIF(DAILY_ACTIVITY.[Nomor_Contract]<>4600005972 OR ISNULL(DAILY_ACTIVITY.[Nomor_Contract]),0, IIF" & _
           "(DAILY_ACTIVITY.[DOR]<>'PIS/AUG20' AND DAILY_ACTIVITY.[WorkType]<>'C.1. Personnel' AND DAILY_ACTIVITY.[WorkType]<>'C.2. Equipment' AND DAILY_ACTIVITY.[StartDate]>#2020/7/31#,(Duration*WORK_TYPE.[Unit Price_082020]), IIF" & _
           "(DAILY_ACTIVITY.[WorkType]='C.1. Personnel' OR DAILY_ACTIVITY.[WorkType]='C.2. Equipment',(Duration*ADDITIONAL_TYPE.[Daily Unit Price]), " & _
           "(Duration*WORK_TYPE.[Unit Price_062019]))))" & _
           " AS Prices, Duration, FromCusto, ToCusto, * FROM ("
           
    strSQL = strA & strSQL & ") ORDER BY DAILY_ACTIVITY.[StartDate], DAILY_ACTIVITY.[ServiceOrder]"
    strSQL1 = strA & strSQL1 & ") ORDER BY DAILY_ACTIVITY.[StartDate], DAILY_ACTIVITY.[ServiceOrder]"
      
    MyDB.QueryDefs.Delete "Query_Attach3"
    Set qdef = MyDB.CreateQueryDef("Query_Attach3", strSQL)
    MyDB.QueryDefs.Delete "Query_SO"
    Set qdef = MyDB.CreateQueryDef("Query_SO", strSQL1)
    
    strSQL1 = "SELECT Query_SO.*, login_tbl.[Full_Name] FROM Query_SO LEFT JOIN [login_tbl] ON Query_SO.[User_Valid] = login_tbl.[UserID] ORDER BY [ServiceOrder]"
    MyDB.QueryDefs.Delete "Query_SO1"
    Set qdef = MyDB.CreateQueryDef("Query_SO1", strSQL1)

    'Open the query and report, built using the IN clause to set the criteria
    
    'Price Query
    strPrice = "SELECT WORK_TYPE.ID,DAILY_ACTIVITY.[WorkType],WORK_TYPE.[Unit Price_082020],Sum(Duration) AS Total_Duration,Sum(Prices) AS Total_Price, Round(Sum(Prices)/1000000,1) AS PriceMil, WORK_TYPE.[Code] FROM ("
    strPrice = strPrice & strSQL & ") GROUP BY DAILY_ACTIVITY.[WorkType], WORK_TYPE.[ID], WORK_TYPE.[Code],WORK_TYPE.[Unit Price_082020] ORDER BY WORK_TYPE.ID"
    
    MyDB.QueryDefs.Delete "Query_Attach1"
    Set qdef = MyDB.CreateQueryDef("Query_Attach1", strPrice)

    'Open the query and report, built using the IN clause to set the criteria
    DoCmd.OpenReport "SERVICE PACKAGE REPORT", acViewReport
    
    'Location Query
    strLoc1 = "SELECT DAILY_ACTIVITY.[WorkType],WORK_TYPE.[ID] AS WID, " & _
             "IIF((WORK_TYPE.[ID]=3 OR WORK_TYPE.[ID]=4 OR (WORK_TYPE.[ID]=12 AND DAILY_ACTIVITY.[Support_Barge_RIG]=Yes)) , LOCATION5.ID ,LOCATION1.ID) AS LOCID, " & _
             "IIF((WORK_TYPE.[ID]=3 OR WORK_TYPE.[ID]=4 OR (WORK_TYPE.[ID]=12 AND DAILY_ACTIVITY.[Support_Barge_RIG]=Yes)) , DAILY_ACTIVITY.[To_Location5] ,DAILY_ACTIVITY.[From_Location1]) AS LOC, " & _
             "DAILY_ACTIVITY.[ServiceClassification], WORK_TYPE.[Unit Price_082020],Duration,Prices FROM ("
    strLoc1 = strLoc1 & strSQL & ")"
    strLoc2 = "SELECT DAILY_ACTIVITY.[WorkType], WID, LOCID, LOC,DAILY_ACTIVITY.[ServiceClassification], WORK_TYPE.[Unit Price_082020],Sum(Duration) AS Total_Duration,Sum(Prices) AS Total_Price FROM ("
    strLoc2 = strLoc2 & strLoc1 & ") GROUP BY LOCID, LOC, DAILY_ACTIVITY.[WorkType],WID, WORK_TYPE.[Unit Price_082020],DAILY_ACTIVITY.[ServiceClassification] HAVING DAILY_ACTIVITY.[ServiceClassification]='A1 - Site Preparation Survey' ORDER BY LOCID, LOC, WID "
    
    MyDB.QueryDefs.Delete "Query_SP-DETAIL"
    Set qdef = MyDB.CreateQueryDef("Query_SP-DETAIL", strLoc2)
    
    'Monthly Graph
    
    strC = "SELECT DOR_TYPE.PBRType, DAILY_ACTIVITY.DOR, DAILY_ACTIVITY.[ServiceOrder], DAILY_ACTIVITY.[StartDate], DAILY_ACTIVITY.[EndDate], DAILY_ACTIVITY.[AdditionelType],ADDITIONAL_TYPE.[Category], DATEADD('m', DATEDIFF('m', 0, DAILY_ACTIVITY.[StartDate]), 1) AS EOMOfSD, DAILY_ACTIVITY.[ServiceClassification], " & _
           "MONTH(DAILY_ACTIVITY.[StartDate]) AS MonthofSD, MONTH(DAILY_ACTIVITY.[EndDate]) AS MonthofED, " & _
           "IIF(DAILY_ACTIVITY.[StartDate]<[Forms]![STPS]![Start Date],0, " & _
           "IIF(MonthofSD=MonthofED,(INT(DAILY_ACTIVITY.[EndDate])-INT(DAILY_ACTIVITY.[StartDate])+1),(INT(DATEADD('m', DATEDIFF('m', 0, DAILY_ACTIVITY.[StartDate]), 1)))-INT(DAILY_ACTIVITY.[StartDate])+1)) AS Dur, " & _
           "Duration, WORK_TYPE.ID, DAILY_ACTIVITY.[WorkType], WORK_TYPE.[Code] INTO SD_TABLE FROM ("
    
    strD = "SELECT DOR_TYPE.PBRType, DAILY_ACTIVITY.DOR, DAILY_ACTIVITY.[ServiceOrder], DAILY_ACTIVITY.[StartDate], DAILY_ACTIVITY.[EndDate], DAILY_ACTIVITY.[AdditionelType],ADDITIONAL_TYPE.[Category], DATEADD('m', DATEDIFF('m', 0, DAILY_ACTIVITY.[EndDate]), -29) AS SOMOfED, DAILY_ACTIVITY.[ServiceClassification], " & _
           "MONTH(DAILY_ACTIVITY.[StartDate]) AS MonthofSD, MONTH(DAILY_ACTIVITY.[EndDate]) AS MonthofED, " & _
           "IIF(DAILY_ACTIVITY.[EndDate]>[Forms]![STPS]![End Date],0, " & _
           "IIF(MonthofSD=MonthofED,(INT(DAILY_ACTIVITY.[EndDate])-INT(DAILY_ACTIVITY.[StartDate])+1),(INT(DAILY_ACTIVITY.[EndDate])-INT(DATEADD('m', DATEDIFF('m', 0, DAILY_ACTIVITY.[EndDate]), -29))+1))) AS Dur, " & _
           "Duration, WORK_TYPE.ID, DAILY_ACTIVITY.[WorkType], WORK_TYPE.[Code] INTO ED_TABLE FROM ("
           
    strE = "SELECT DOR_TYPE.PBRType, DAILY_ACTIVITY.DOR, DAILY_ACTIVITY.[ServiceOrder], DAILY_ACTIVITY.[StartDate], DATEADD('m', DATEDIFF('m', 0, DAILY_ACTIVITY.[StartDate])+1, 1) AS EndDate, DAILY_ACTIVITY.[AdditionelType], ADDITIONAL_TYPE.[Category], DATEADD('m', DATEDIFF('m', 0, DAILY_ACTIVITY.[EndDate])-1, -29) AS SOMOfED, DAILY_ACTIVITY.[ServiceClassification], " & _
           "MONTH(DAILY_ACTIVITY.[StartDate]) AS MonthofSD, MONTH(DAILY_ACTIVITY.[EndDate]) AS MonthofED, " & _
           "(INT(DATEADD('m', DATEDIFF('m', 0, DAILY_ACTIVITY.[StartDate])+1, 1))-INT(DATEADD('m', DATEDIFF('m', 0, DAILY_ACTIVITY.[EndDate])-1, -29))+1) AS Dur," & _
           "Duration, WORK_TYPE.[ID], DAILY_ACTIVITY.[WorkType], WORK_TYPE.[Code] FROM ("
           
    strC = strC & strSQL & ") ORDER BY DAILY_ACTIVITY.[ServiceOrder]"
    strD = strD & strSQL & ") ORDER BY DAILY_ACTIVITY.[ServiceOrder]"
    strE = strE & strSQL & ") WHERE MONTH(DAILY_ACTIVITY.[EndDate])-MONTH(DAILY_ACTIVITY.[StartDate])>1 AND MONTH(DAILY_ACTIVITY.[EndDate])-MONTH(DAILY_ACTIVITY.[StartDate])<11 ORDER BY DAILY_ACTIVITY.[ServiceOrder]"
    
    DoCmd.SetWarnings False

    MyDB.TableDefs.Delete "SD_TABLE"
    Set qdef = MyDB.CreateQueryDef("Query1", strC)
    DoCmd.OpenQuery "Query1", acViewNormal
    MyDB.QueryDefs.Delete "Query1"
        
    MyDB.TableDefs.Delete "ED_TABLE"
    Set qdef = MyDB.CreateQueryDef("Query2", strD)
    DoCmd.OpenQuery "Query2", acViewNormal
    MyDB.QueryDefs.Delete "Query2"
    
    MyDB.QueryDefs.Delete "BETWEEN_TABLE"
    Set qdef = MyDB.CreateQueryDef("BETWEEN_TABLE", strE)
    
    If DCount("*", "BETWEEN_TABLE") > 0 Then
        strB = "SELECT * FROM SD_TABLE WHERE (MonthofSD<>MonthofED AND Dur<>0) UNION " & _
           "SELECT * FROM ED_TABLE WHERE (MonthofSD<>MonthofED AND Dur<>0) UNION " & _
           "SELECT * FROM BETWEEN_TABLE UNION " & _
           "SELECT * FROM SD_TABLE WHERE (MonthofSD=MonthofED)"
    Else
        strB = "SELECT * FROM SD_TABLE WHERE (MonthofSD<>MonthofED AND Dur<>0) UNION " & _
           "SELECT * FROM ED_TABLE WHERE (MonthofSD<>MonthofED AND Dur<>0) UNION " & _
           "SELECT * FROM SD_TABLE WHERE (MonthofSD=MonthofED)"
    End If
    
    
    MyDB.QueryDefs.Delete "Graph_Query"
    Set qdef = MyDB.CreateQueryDef("Graph_Query", strB)
    MyDB.TableDefs.Delete "FINE"
    CurrentDb.Execute "Select Graph_Query.* Into FINE From Graph_Query WHERE ID<>23 AND ID<>24 AND ID<>25 AND ID<>26 AND ID<>27 AND ID<>28 AND ID<>29 AND ID<>30 AND ID<>31 AND ID<>32 AND ID<>33 AND ID<>34 AND ID<>35 AND ID<>36"
    
    
    strC = "TRANSFORM Sum([Dur]) AS SumOfDur " & _
           "SELECT [ID], [Code], [WorkType], Sum([Dur]) AS [Total Of Dur] " & _
           "FROM FINE " & _
           "GROUP BY [Code], [ID], [WorkType] ORDER BY [ID]" & _
           "PIVOT Format([EOMofSD],'mmm') In ('Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec')"

    MyDB.QueryDefs.Delete "STPS_STATISTIC_MONTHLY"
    Set qdef = MyDB.CreateQueryDef("STPS_STATISTIC_MONTHLY", strC)
        
    strD = "TRANSFORM Sum([Dur]) AS SumOfDur " & _
           "SELECT [ID], [Code], [WorkType], Sum([Dur]) AS [Total Of Dur] " & _
           "FROM FINE " & _
           "GROUP BY [Code], [ID], [WorkType] ORDER BY [ID]" & _
           "PIVOT Format([EOMofSD],'yyyy') In ('2014','2015','2016','2017','2018','2019','2020','2021')"
    
    MyDB.QueryDefs.Delete "STPS_STATISTIC_ANNUAL"
    Set qdef = MyDB.CreateQueryDef("STPS_STATISTIC_ANNUAL", strD)
        
    'Daily Additional
    MyDB.TableDefs.Delete "ADD"
    CurrentDb.Execute "Select Graph_Query.* Into ADD From Graph_Query WHERE Graph_Query.[ID]=35 OR Graph_Query.[ID]=36"
    
    MyDB.TableDefs.Delete "ADD_DAILY"
    strAdd = "SELECT ADDITIONAL_TYPE.[ID],DAILY_ACTIVITY.[AdditionelType],ADDITIONAL_TYPE.[Category],ADDITIONAL_TYPE.[Daily Unit Price],Sum(Duration) AS Total_Duration,Sum(Prices) AS Total_Price, Round(Sum(Prices)/1000000,1) AS PriceMil INTO ADD_DAILY FROM ("
    strAdd = strAdd & strSQL & ") WHERE DAILY_ACTIVITY.[WorkType]='C.1. Personnel' OR DAILY_ACTIVITY.[WorkType]='C.2. Equipment' GROUP BY DAILY_ACTIVITY.[AdditionelType],ADDITIONAL_TYPE.[ID],ADDITIONAL_TYPE.[Category],ADDITIONAL_TYPE.[Daily Unit Price] ORDER BY ADDITIONAL_TYPE.ID"
    MyDB.QueryDefs.Delete "Query_Attach2"
    Set qdef = MyDB.CreateQueryDef("Query_Attach2", strAdd)
    DoCmd.OpenQuery ("Query_Attach2")
    
    MyDB.TableDefs.Delete "tempDates"
    strG = "SELECT datelist INTO tempDates FROM (" & _
           "SELECT MIN([StartDate]) AS datelist FROM ADD)"
    CurrentDb.Execute strG
    
    For i = (CInt(Left(CStr(Me.[Start Date]), 2))) To (CInt(Left(CStr(Me.[End Date]), 2))) - 1
        strH = "INSERT INTO tempDates " & _
               "SELECT DATEADD('d',MIN([StartDate])," & i & ") AS datelist FROM ADD "
        'Debug.Print strH
        CurrentDb.Execute strH
    Next i
           
    strI = "TRANSFORM Count(tempDates.datelist) " & _
           "SELECT ADDITIONAL_TYPE.[ID] AS ID2, ADD.[AdditionelType] " & _
           "FROM tempDates LEFT JOIN (ADD LEFT JOIN [ADDITIONAL_TYPE] ON ADD.AdditionelType = ADDITIONAL_TYPE.[Additionel Type]) " & _
           "ON tempDates.[datelist]>=ADD.[StartDate] AND tempDates.[datelist]<=CDate(ADD.[EndDate])" & _
           "GROUP BY ADDITIONAL_TYPE.[ID], ADD.[AdditionelType] ORDER BY ADDITIONAL_TYPE.[ID] " & _
           "PIVOT FORMAT(tempDates.datelist,'dd')"
            
    MyDB.QueryDefs.Delete "ADD_DAILY2"
    Set qdef = MyDB.CreateQueryDef("ADD_DAILY2", strI)
    
    strE = "SELECT * FROM ADD_DAILY LEFT JOIN ADD_DAILY2 ON ADD_DAILY.[ID] = ADD_DAILY2.[ID2]"
    MyDB.QueryDefs.Delete "Query_Attach2"
    Set qdef = MyDB.CreateQueryDef("Query_Attach2", strE)
    
    
    DoCmd.SetWarnings True
    'Clear listbox selection after running query
    'For Each varItem In Me.WorkType_List.ItemsSelected
    '    Me.WorkType_List.Selected(varItem) = False
    'Next varItem

Exit_cmdRunQuery_Click:
    Exit Sub

Err_cmdRunQuery_Click:

    If Err.Number = 5 Then
        MsgBox "You must make a selection(s) from the list" _
               , , "Selection Required !"
        Resume Exit_cmdRunQuery_Click
    Else
        'Write out the error and exit the sub
        MsgBox Err.Description
        Resume Exit_cmdRunQuery_Click
    End If
End Sub

'Remaining CRO Calculation
Private Sub cmdCRO_Click()

On Error GoTo Err_cmdCRO_Click
    Dim MyDB As DAO.Database
    Dim qdef As DAO.QueryDef
    Dim i As Integer
    Dim strSQL As String
    Dim strA, strB, strC As String
    Dim SelectAll As Boolean
    Dim varItem As Variant

    Set MyDB = CurrentDb()
    Me.Summary15 = [Forms]![STPS]![CRO_Type]
    
    If IsNull([Forms]![STPS]![CRO_Type]) Then
        MsgBox "You must make a selection from the box" _
               , , "Selection Required !"
        Resume Exit_cmdCRO_Click
    ElseIf [Forms]![STPS]![CRO_Type] = "ALL" Then
        strA = "SELECT MAX(ID) AS CROID, CRO_No, Code_DOR, StartValidity, EndValidity, MAX(Budget_Cost) AS Budget, SUM(PBR_IssuedCost) AS PBR, MAX(Budget_Cost)-SUM(PBR_IssuedCost) AS [Remaining CRO], ROUND((SUM(PBR_IssuedCost)/MAX(Budget_Cost)),3) AS [Progress], MAX(CRO_RETURNOA.ReturnOA_Code) AS ReturnOACode " & _
                "INTO CRO_ FROM CRO LEFT JOIN CRO_RETURNOA ON CRO.ReturntoOA_Status=CRO_RETURNOA.ReturnOAStat GROUP BY CRO_No, Code_DOR, StartValidity, EndValidity "
        strB = "SELECT CROID, CRO_No, Code_DOR, StartValidity, EndValidity, Budget, PBR, [Remaining CRO], [Progress], ReturnOACode, ReturnOAStat FROM CRO_ " & _
                "LEFT JOIN CRO_RETURNOA ON CRO_.ReturnOACode=CRO_RETURNOA.ReturnOA_Code ORDER BY StartValidity, EndValidity"
    ElseIf [Forms]![STPS]![CRO_Type] = "SP" Then
        strA = "SELECT MAX(ID) AS CROID, CRO_No, Code_DOR, StartValidity, EndValidity, MAX(Budget_Cost) AS Budget, SUM(PBR_IssuedCost) AS PBR, MAX(Budget_Cost)-SUM(PBR_IssuedCost) AS [Remaining CRO], ROUND((SUM(PBR_IssuedCost)/MAX(Budget_Cost)),3) AS [Progress], MAX(CRO_RETURNOA.ReturnOA_Code) AS ReturnOACode " & _
                "INTO CRO_ FROM CRO LEFT JOIN CRO_RETURNOA ON CRO.ReturntoOA_Status=CRO_RETURNOA.ReturnOAStat " & _
                "WHERE Code_DOR='SP' GROUP BY CRO_No, Code_DOR, StartValidity, EndValidity "
        strB = "SELECT CROID, CRO_No, Code_DOR, StartValidity, EndValidity, Budget, PBR, [Remaining CRO], [Progress], ReturnOACode, ReturnOAStat FROM CRO_ " & _
                "LEFT JOIN CRO_RETURNOA ON CRO_.ReturnOACode=CRO_RETURNOA.ReturnOA_Code ORDER BY StartValidity, EndValidity"
    ElseIf [Forms]![STPS]![CRO_Type] = "R" Then
        strA = "SELECT MAX(ID) AS CROID, CRO_No, Code_DOR, StartValidity, EndValidity, MAX(Budget_Cost) AS Budget, SUM(PBR_IssuedCost) AS PBR, MAX(Budget_Cost)-SUM(PBR_IssuedCost) AS [Remaining CRO], ROUND((SUM(PBR_IssuedCost)/MAX(Budget_Cost)),3) AS [Progress], MAX(CRO_RETURNOA.ReturnOA_Code) AS ReturnOACode " & _
                "INTO CRO_ FROM CRO LEFT JOIN CRO_RETURNOA ON CRO.ReturntoOA_Status=CRO_RETURNOA.ReturnOAStat " & _
                "WHERE Code_DOR='R' GROUP BY CRO_No, Code_DOR, StartValidity, EndValidity "
        strB = "SELECT CROID, CRO_No, Code_DOR, StartValidity, EndValidity, Budget, PBR, [Remaining CRO], [Progress], ReturnOACode, ReturnOAStat FROM CRO_ " & _
                "LEFT JOIN CRO_RETURNOA ON CRO_.ReturnOACode=CRO_RETURNOA.ReturnOA_Code ORDER BY StartValidity, EndValidity"
    ElseIf [Forms]![STPS]![CRO_Type] = "PIS" Then
        strA = "SELECT MAX(ID) AS CROID, CRO_No, Code_DOR, StartValidity, EndValidity, MAX(Budget_Cost) AS Budget, SUM(PBR_IssuedCost) AS PBR, MAX(Budget_Cost)-SUM(PBR_IssuedCost) AS [Remaining CRO], ROUND((SUM(PBR_IssuedCost)/MAX(Budget_Cost)),3) AS [Progress], MAX(CRO_RETURNOA.ReturnOA_Code) AS ReturnOACode " & _
                "INTO CRO_ FROM CRO LEFT JOIN CRO_RETURNOA ON CRO.ReturntoOA_Status=CRO_RETURNOA.ReturnOAStat " & _
                "WHERE Code_DOR='PS' OR Code_DOR='PS-P1' OR Code_DOR='PS-P2' GROUP BY CRO_No, Code_DOR, StartValidity, EndValidity "
        strB = "SELECT CROID, CRO_No, Code_DOR, StartValidity, EndValidity, Budget, PBR, [Remaining CRO], [Progress], ReturnOACode, ReturnOAStat FROM CRO_ " & _
                "LEFT JOIN CRO_RETURNOA ON CRO_.ReturnOACode=CRO_RETURNOA.ReturnOA_Code ORDER BY StartValidity, EndValidity"
    ElseIf [Forms]![STPS]![CRO_Type] = "RU V" Then
        strA = "SELECT MAX(ID) AS CROID, CRO_No, Code_DOR, StartValidity, EndValidity, MAX(Budget_Cost) AS Budget, SUM(PBR_IssuedCost) AS PBR, MAX(Budget_Cost)-SUM(PBR_IssuedCost) AS [Remaining CRO], ROUND((SUM(PBR_IssuedCost)/MAX(Budget_Cost)),3) AS [Progress], MAX(CRO_RETURNOA.ReturnOA_Code) AS ReturnOACode " & _
                "INTO CRO_ FROM CRO LEFT JOIN CRO_RETURNOA ON CRO.ReturntoOA_Status=CRO_RETURNOA.ReturnOAStat " & _
                "WHERE Code_DOR='RU V' GROUP BY CRO_No, Code_DOR, StartValidity, EndValidity "
        strB = "SELECT CROID, CRO_No, Code_DOR, StartValidity, EndValidity, Budget, PBR, [Remaining CRO], [Progress], ReturnOACode, ReturnOAStat FROM CRO_ " & _
                "LEFT JOIN CRO_RETURNOA ON CRO_.ReturnOACode=CRO_RETURNOA.ReturnOA_Code ORDER BY StartValidity, EndValidity"
    ElseIf [Forms]![STPS]![CRO_Type] = "TDEC-1X" Then
        strA = "SELECT MAX(ID) AS CROID, CRO_No, Code_DOR, StartValidity, EndValidity, MAX(Budget_Cost) AS Budget, SUM(PBR_IssuedCost) AS PBR, MAX(Budget_Cost)-SUM(PBR_IssuedCost) AS [Remaining CRO], ROUND((SUM(PBR_IssuedCost)/MAX(Budget_Cost)),3) AS [Progress], MAX(CRO_RETURNOA.ReturnOA_Code) AS ReturnOACode " & _
                "INTO CRO_ FROM CRO LEFT JOIN CRO_RETURNOA ON CRO.ReturntoOA_Status=CRO_RETURNOA.ReturnOAStat " & _
                "WHERE Code_DOR='TDEC-1X' GROUP BY CRO_No, Code_DOR, StartValidity, EndValidity "
        strB = "SELECT CROID, CRO_No, Code_DOR, StartValidity, EndValidity, Budget, PBR, [Remaining CRO], [Progress], ReturnOACode, ReturnOAStat FROM CRO_ " & _
                "LEFT JOIN CRO_RETURNOA ON CRO_.ReturnOACode=CRO_RETURNOA.ReturnOA_Code ORDER BY StartValidity, EndValidity"
    ElseIf [Forms]![STPS]![CRO_Type] = "TANK" Then
        strA = "SELECT MAX(ID) AS CROID, CRO_No, Code_DOR, StartValidity, EndValidity, MAX(Budget_Cost) AS Budget, SUM(PBR_IssuedCost) AS PBR, MAX(Budget_Cost)-SUM(PBR_IssuedCost) AS [Remaining CRO], ROUND((SUM(PBR_IssuedCost)/MAX(Budget_Cost)),3) AS [Progress], MAX(CRO_RETURNOA.ReturnOA_Code) AS ReturnOACode " & _
                "INTO CRO_ FROM CRO LEFT JOIN CRO_RETURNOA ON CRO.ReturntoOA_Status=CRO_RETURNOA.ReturnOAStat " & _
                "WHERE Code_DOR='TM' GROUP BY CRO_No, Code_DOR, StartValidity, EndValidity "
        strB = "SELECT CROID, CRO_No, Code_DOR, StartValidity, EndValidity, Budget, PBR, [Remaining CRO], [Progress], ReturnOACode, ReturnOAStat FROM CRO_ " & _
                "LEFT JOIN CRO_RETURNOA ON CRO_.ReturnOACode=CRO_RETURNOA.ReturnOA_Code ORDER BY StartValidity, EndValidity"

    'Site Preparation
    'strA = "SELECT *, CRO_Quantity-[Query_SP-DETAIL].[Total_Duration] AS REMAINING_DAYS " & _
           "FROM (SELECT CRO_TABLE_SP.*, [Query_SP-DETAIL].*, IIF(ISNULL(CRO_TABLE_SP.Quantity), 0, CRO_TABLE_SP.Quantity) AS CRO_Quantity " & _
           "FROM ([Query_SP-DETAIL] INNER JOIN LOCATION ON [Query_SP-DETAIL].[ID] = LOCATION.[ID]) LEFT JOIN CRO_TABLE_SP ON [Query_SP-DETAIL].[From_Location1] = CRO_TABLE_SP.[Location] AND [Query_SP-DETAIL].[WorkType] = CRO_TABLE_SP.[Package]" & _
           "ORDER BY [Query_SP-DETAIL].[ID], [Query_SP-DETAIL].[WID]) "
    'MyDB.QueryDefs.Delete "CRO_SP"
    'Set qdef = MyDB.CreateQueryDef("CRO_SP", strA)
    
    'Routine
    'strB = "(SELECT CRO_TABLE_ROUTINE.*, [Query_Attach3].[DAILY_ACTIVITY.DOR], [Query_Attach3].[WORK_TYPE.ID], [Query_Attach3].[WorkType],[Query_Attach3].[Duration], IIF(ISNULL(CRO_TABLE_ROUTINE.Quantity), 0, CRO_TABLE_ROUTINE.Quantity) AS CRO_Quantity " & _
           "FROM ([Query_Attach3] INNER JOIN DAILY_ACTIVITY ON [Query_Attach3].[ServiceOrder] = [DAILY_ACITIVITY].[ServiceOrder] (LEFT JOIN CRO_TABLE_ROUTINE ON [Query_Attach3].[WorkType] = CRO_TABLE_ROUTINE.[Package])) " & _
           "WHERE [Query_Attach3].[DAILY_ACTIVITY.DOR]='R' OR [Query_Attach3].[DAILY_ACTIVITY.DOR]='R/B1' " & _
           "GROUP BY [Query_Attach3].[WORK_TYPE.ID] ORDER BY [Query_Attach3].[WORK_TYPE.ID]) "
    'strB = "SELECT [DOR], [ID], [Code], [WorkType], Month, Sum(Duration) AS Total_Duration " & _
           "FROM (SELECT *, Month([StartDate]) AS Month FROM Graph_Query) WHERE DOR='R' OR DOR='R/B1' " & _
           "GROUP BY Month, ID, WorkType, Code, DOR ORDER BY Month, ID "
    'MyDB.QueryDefs.Delete "CRO_R"
    'Set qdef = MyDB.CreateQueryDef("CRO_R", strB)
    
    'strC = "SELECT *, CRO_Quantity-CRO_R.[Total_Duration] AS REMAINING_DAYS " & _
           "FROM (SELECT CRO_TABLE_ROUTINE.*, CRO_R.*, IIF(ISNULL(CRO_TABLE_ROUTINE.Quantity), 0, CRO_TABLE_ROUTINE.Quantity) AS CRO_Quantity " & _
           "FROM CRO_R LEFT JOIN CRO_TABLE_ROUTINE " & _
           "ON CRO_R.[WorkType] = CRO_TABLE_ROUTINE.[Package] AND CRO_R.[Month] = Month(CRO_TABLE_ROUTINE.[Month]) " & _
           "ORDER BY CRO_R.[ID]) "
    'MyDB.QueryDefs.Delete "CRO_R1"
    'Set qdef = MyDB.CreateQueryDef("CRO_R1", strC)
    End If
    
    DoCmd.SetWarnings False
    
    DoCmd.RunSQL strA
    MyDB.QueryDefs.Delete "CRO_Budget"
    Set qdef = MyDB.CreateQueryDef("CRO_Budget", strB)
    DoCmd.OpenReport "CRO ABSORPTION", acViewReport
    
Exit_cmdCRO_Click:
    Exit Sub

Err_cmdCRO_Click:

    'Write out the error and exit the sub
    MsgBox Err.Description
    Resume Exit_cmdCRO_Click

End Sub

'Remaining RKAP Calculation
Private Sub cmdRKAP_Click()

On Error GoTo Err_cmdRKAP_Click
    Dim MyDB As DAO.Database
    Dim qdef As DAO.QueryDef
    Dim i As Integer
    Dim strSQL As String
    Dim strA, strB, strC, strD, strE, strF, strG, strH, strI As String
    Dim SelectAll As Boolean
    Dim varItem As Variant

    Set MyDB = CurrentDb()
    DoCmd.SetWarnings False
    
    Me.Summary14 = [Forms]![STPS]![RKAP_Year]
    
    'Choose RKAP based on selected year
    strA = "SELECT RKAP_TABLE.* FROM RKAP_TABLE LEFT JOIN [WORK_TYPE] ON RKAP_TABLE.Work_Type = WORK_TYPE.[Work Type] " & _
            "WHERE Format([StartPeriod],'yyyy')=[Forms]![STPS]![RKAP_Year] "
    MyDB.QueryDefs.Delete "RKAP_YEAR"
    Set qdef = MyDB.CreateQueryDef("RKAP_YEAR", strA)
    
    'Choose DAILY_ACTIVITY WHERE DOR TYPE=ROUTINE
    strB = "SELECT Sum(Duration) AS Consumed, Sum(Prices) AS Consumed_Amount, WorkType, RKAP_Work, WORK_TYPE.Code, WORK_TYPE.[Unit Price_082020] FROM (SELECT *, IIF(DAILY_ACTIVITY.[WorkType]='C.1. Personnel' OR DAILY_ACTIVITY.[WorkType]='C.2. Equipment',Duration*ADDITIONAL_TYPE.[Daily Unit Price],Duration*WORK_TYPE.[Unit Price_082020]) AS Prices " & _
            "FROM (SELECT *, INT(DAILY_ACTIVITY.[EndDate])+1-INT(DAILY_ACTIVITY.[StartDate]) AS Duration FROM ((DAILY_ACTIVITY " & _
            "LEFT JOIN [WORK_TYPE] ON DAILY_ACTIVITY.WorkType = WORK_TYPE.[Work Type]) " & _
            "LEFT JOIN [ADDITIONAL_TYPE] ON DAILY_ACTIVITY.AdditionelType = ADDITIONAL_TYPE.[Additionel Type]) " & _
            "WHERE (DOR='R' OR DOR='R/B1' OR DOR='R/B2') " & _
            "AND (YEAR(DAILY_ACTIVITY.[StartDate])=[Forms]![STPS]![RKAP_Year] OR YEAR(DAILY_ACTIVITY.[EndDate])=[Forms]![STPS]![RKAP_Year]) " & _
            "AND DAILY_ACTIVITY.[PHM_Validation]=Yes)) " & _
            "GROUP BY RKAP_Work, WorkType, WORK_TYPE.[Unit Price_082020], WORK_TYPE.Code "
    MyDB.QueryDefs.Delete "DA_R"
    Set qdef = MyDB.CreateQueryDef("DA_R", strB)
    
    'JOIN RKAP AND DA_R TABLE
    strC = "SELECT *, IIF(ISNULL(Consumed), 0, Consumed) AS Consum , IIF(ISNULL(Consumed_Amount), 0, Consumed_Amount) AS Consum_Amount, QuantityRKAP, RKAP_Amount " & _
            "FROM (SELECT *, IIF(ISNULL(RKAP_YEAR.Quantity), 0, RKAP_YEAR.Quantity) AS QuantityRKAP FROM DA_R LEFT JOIN RKAP_YEAR ON DA_R.RKAP_Work = RKAP_YEAR.Work AND DA_R.WorkType = RKAP_YEAR.Work_Type) "
    
    strD = "SELECT *, IIF(ISNULL(Consumed), 0, Consumed) AS Consum, IIF(ISNULL(Consumed_Amount), 0, Consumed_Amount) AS Consum_Amount, QuantityRKAP, RKAP_Amount " & _
            "FROM (SELECT *, IIF(ISNULL(RKAP_YEAR.Quantity), 0, RKAP_YEAR.Quantity) AS QuantityRKAP FROM DA_R RIGHT OUTER JOIN RKAP_YEAR ON DA_R.RKAP_Work = RKAP_YEAR.Work AND DA_R.WorkType = RKAP_YEAR.Work_Type) "
            
    strC = strC & " UNION " & strD
    strC = "SELECT *, IIF(DA_R.WorkType = RKAP_YEAR.Work_Type, DA_R.WorkType, DA_R.WorkType & RKAP_YEAR.Work_Type) AS WT " & _
            "FROM (" & strC & ")"
    strC = "SELECT MAX(Consum) AS Consume, " & _
            "MAX(Consum_Amount) AS Consume_Amount, " & _
            "MAX(QuantityRKAP) AS QtyRKAP, " & _
            "MAX(RKAP_Amount) AS RKAPAmount, " & _
            "MAX(Code) AS CodeWT, " & _
            "MAX(DA_R.[Unit Price_082020]) AS UnitPrice, " & _
            "RKAP_Code, WT, Work, Work_Category FROM (" & strC & _
            ") GROUP BY RKAP_Code, WT, Work, Work_Category "
    strC = "SELECT IIF(Consume=0, QtyRKAP, IIF(QtyRKAP=0, -Consume, QtyRKAP-Consume)) AS Remaining, " & _
            "IIF(Consume_Amount=0, RKAPAmount, IIF(RKAPAmount=0, -Consume_Amount, RKAPAmount-Consume_Amount)) AS Remaining_Amount, * " & _
            "FROM (" & strC & ")"
    'MyDB.QueryDefs.Delete "DA_RKAPP"
    Set qdef = MyDB.CreateQueryDef("DA_RKAPP", strC)
    
    strD = "SELECT Remaining, Remaining_Amount, Consume, Consume_Amount, QtyRKAP, RKAPAmount, CodeWT, RKAP_Code, WT, Work, Work_Category, WORK_TYPE.* " & _
            "INTO DA_RKAP2 FROM DA_RKAPP LEFT JOIN [WORK_TYPE] ON DA_RKAPP.WT = WORK_TYPE.[Work Type] ORDER BY RKAP_Code, WORK_TYPE.ID"
    DoCmd.RunSQL strD
    
    MyDB.QueryDefs.Delete "DA_RKAPP"
    MyDB.TableDefs.Delete "DA_RKAP"
    strE = "SELECT * INTO DA_RKAP FROM DA_RKAP2"
    'WHERE RKAP_Code IS NOT NULL"
    DoCmd.RunSQL strE
    MyDB.TableDefs.Delete "DA_RKAP2"
    
    MyDB.TableDefs.Delete "DA_RKAP_SUMMARY"
    strF = "SELECT Work, Work_Category, SUM(QtyRKAP) AS QTY, SUM(RKAPAmount) AS RKAP, SUM(Consume) AS Consumed, SUM(Consume_Amount) AS Consumed_Amount,  FORMAT(SUM(Consume_Amount)*100/SUM(RKAPAmount),'0') AS Percentage " & _
            "INTO DA_RKAP_SUMMARY FROM DA_RKAP GROUP BY Work, Work_Category ORDER BY Work, Work_Category"
    DoCmd.RunSQL strF
    
    'Open the query and report, built using the IN clause to set the criteria
    DoCmd.OpenReport "RKAP MONITORING", acViewReport
    DoCmd.OpenReport "SUMMARY of  RKAP MONITORING", acViewReport
    
    DoCmd.SetWarnings True
    
Exit_cmdRKAP_Click:
    Exit Sub

Err_cmdRKAP_Click:

    If Err.Number = 5 Then
        MsgBox "You must make a selection(s) from the box" _
               , , "Selection Required !"
        Resume Exit_cmdRKAP_Click
    Else
        'Write out the error and exit the sub
        MsgBox Err.Description
        Resume Exit_cmdRKAP_Click
    End If

End Sub

Private Sub cmdInputData_Click()
On Error GoTo Error_Handler
    DoCmd.Close acForm, "STPS", acSaveYes
    DoCmd.OpenForm "INPUT DATA", acViewNormal

Error_Handler_Exit:
    On Error Resume Next
 
Error_Handler:
    Resume Error_Handler_Exit
End Sub

Private Sub cmdValidate_Click()
On Error GoTo Error_Handler
    DoCmd.Close acForm, "STPS", acSaveYes
    DoCmd.OpenForm "VALIDATE DATA", acViewNormal
    
Error_Handler_Exit:
    On Error Resume Next
Error_Handler:
    Resume Error_Handler_Exit
End Sub

Private Sub cmdRKAPINPUT_Click()
On Error GoTo Error_Handler
    DoCmd.Close acForm, "STPS", acSaveYes
    DoCmd.OpenForm "RKAP INPUT", acViewNormal
    
Error_Handler_Exit:
    On Error Resume Next
 
Error_Handler:
    Resume Error_Handler_Exit
    
End Sub

Private Sub cmdCROInput_Click()
On Error GoTo Error_Handler
    DoCmd.Close acForm, "STPS", acSaveYes
    DoCmd.OpenForm "CRO INPUT", acViewNormal

Error_Handler_Exit:
    On Error Resume Next
 
Error_Handler:
    Resume Error_Handler_Exit
    
End Sub
Private Sub cmdCloseFilter_Click()
    DoCmd.Close acForm, "STPS", acSaveYes
    DoCmd.OpenForm "DASHBOARD", acViewNormal
End Sub

